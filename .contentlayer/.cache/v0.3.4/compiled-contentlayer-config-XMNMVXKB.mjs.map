{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\n    defineDocumentType,\n    defineNestedType,\n    makeSource,\n} from \"contentlayer/source-files\";\n\nimport rehypeSlug from \"rehype-slug\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport readingTime from \"reading-time\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\n\nexport const CloudinaryImage = defineNestedType(() => ({\n    name: \"CloudinaryImage\",\n    displayName: \"Cloudinary Image\",\n    fields: {\n        height: {\n            type: \"number\",\n            description: \"Height of the image\",\n            required: true,\n        },\n        width: {\n            type: \"number\",\n            description: \"Width of the image\",\n            required: true,\n        },\n        url: {\n            type: \"string\",\n            description: \"URL of the image\",\n            required: true,\n        },\n    },\n}));\n\nexport const Proof = defineNestedType(() => ({\n    name: \"Proof\",\n    displayName: \"Proof\",\n    fields: {\n        title: {\n            type: \"string\",\n            description: \"Title of the proof\",\n            required: true,\n        },\n        url: {\n            type: \"string\",\n            description: \"URL to the proof\",\n            required: true,\n        },\n    },\n}));\n\nexport const Project = defineDocumentType(() => ({\n    name: \"Project\",\n    filePathPattern: \"projects/**/*.mdx\",\n    contentType: \"mdx\",\n    fields: {\n        name: {\n            type: \"string\",\n            description: \"The name of the project\",\n            required: true,\n        },\n        description: {\n            type: \"string\",\n            description: \"The description of the project\",\n            required: true,\n        },\n        link: {\n            type: \"string\",\n            description: \"The link to the project's page\",\n            required: false,\n        },\n        githubLink: {\n            type: \"string\",\n            description: \"The link to the project's github page\",\n            required: false,\n        },\n        iconName: {\n            type: \"string\",\n            description: \"The name of the icon to use\",\n            required: true,\n        },\n        image: {\n            type: \"nested\",\n            description: \"Image for the project\",\n            of: CloudinaryImage,\n        },\n    },\n    computedFields: {\n        slug: {\n            type: \"string\",\n            resolve: doc => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\n        },\n    },\n}));\n\nexport const BlogPost = defineDocumentType(() => ({\n    name: \"BlogPost\",\n    filePathPattern: \"blog/**/*.mdx\",\n    contentType: \"mdx\",\n    fields: {\n        title: {\n            type: \"string\",\n            description: \"The title of the blog post\",\n            required: true,\n        },\n        date: {\n            type: \"string\",\n            description: \"The date of the blog post\",\n            required: true,\n        },\n        cannonicalURL: {\n            type: \"string\",\n            description: \"The link to the blog post\",\n            required: false,\n        },\n        image: {\n            type: \"nested\",\n            description: \"Image for the blog post\",\n            of: CloudinaryImage,\n        },\n    },\n    computedFields: {\n        slug: {\n            type: \"string\",\n            resolve: doc => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\n        },\n        dateUpdated: {\n            type: \"string\",\n            resolve: () => new Date().toDateString(),\n        },\n        readingTime: {\n            type: \"json\",\n            resolve: doc => readingTime(doc.body.raw),\n        },\n        wordCount: {\n            type: \"number\",\n            resolve: doc => doc.body.raw.split(/\\s+/gu).length,\n        },\n    },\n}));\n\nexport const Templates = defineDocumentType(() => ({\n    name: \"Template\",\n    filePathPattern: \"templates/**/*.mdx\",\n    contentType: \"mdx\",\n    fields: {\n        title: {\n            type: \"string\",\n            description: \"The title of the template\",\n            required: true,\n        },\n        date: {\n            type: \"date\",\n            description: \"The date when the template was achieved\",\n            required: false,\n        },\n        proof: {\n            type: \"nested\",\n            of: Proof,\n        },\n    },\n    computedFields: {\n        slug: {\n            type: \"string\",\n            resolve: doc => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\n        },\n    },\n}));\n\nexport default makeSource({\n    contentDirPath: \"data\",\n    documentTypes: [Project, BlogPost, Templates],\n    mdx: {\n        rehypePlugins: [\n            rehypeSlug,\n            [\n                rehypePrettyCode,\n                {\n                    theme: \"github-dark\",\n                    onVisitLine(node) {\n                        // Prevent lines from collapsing in `display: grid` mode, and\n                        // allow empty lines to be copy/pasted\n                        if (node.children.length === 0) {\n                            node.children = [{ type: \"text\", value: \" \" }];\n                        }\n                    },\n                },\n            ],\n            [\n                rehypeAutolinkHeadings,\n                {\n                    properties: {\n                        className: \"anchor\",\n                    },\n                },\n            ],\n        ],\n    },\n});\n"],
  "mappings": "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",
  "names": []
}
